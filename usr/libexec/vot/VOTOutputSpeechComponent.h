//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import "VOTOutputComponent.h"

#import "TTSSpeechSynthesizerDelegate-Protocol.h"

@class AXIndexMap, AXSSPunctuationGroup, NSArray, NSDictionary, NSMutableDictionary, NSNumber, NSString, SCRCTargetSelectorTimer, SCRCThread, TTSSpeechSynthesizer;
@protocol BSInvalidatable;

@interface VOTOutputSpeechComponent : VOTOutputComponent <TTSSpeechSynthesizerDelegate>
{
    SCRCThread *_speechThread;	// 24 = 0x18
    AXIndexMap *_allPunctuationTable;	// 32 = 0x20
    AXIndexMap *_selectedLanguageAllPunctuationTable;	// 40 = 0x28
    AXIndexMap *_somePunctuationTable;	// 48 = 0x30
    AXIndexMap *_selectedLanguageSomePunctuationTable;	// 56 = 0x38
    AXIndexMap *_noPunctuationTable;	// 64 = 0x40
    AXIndexMap *_selectedLanguageNoPunctuationTable;	// 72 = 0x48
    AXIndexMap *_specialPunctionTable;	// 80 = 0x50
    AXIndexMap *_noneTableOverrides;	// 88 = 0x58
    NSString *_spokenLanguage;	// 96 = 0x60
    NSDictionary *_languageExceptions;	// 104 = 0x68
    _Bool _isSpeaking;	// 112 = 0x70
    _Bool _userStopped;	// 113 = 0x71
    _Bool _isPaused;	// 114 = 0x72
    _Bool _isVolumeCapped;	// 115 = 0x73
    float _rawVolume;	// 116 = 0x74
    NSMutableDictionary *_speechStatistics;	// 120 = 0x78
    NSDictionary *_emoticonReplacements;	// 128 = 0x80
    double _lastTimeSpeechStarted;	// 136 = 0x88
    AXIndexMap *_currentActionVariants;	// 144 = 0x90
    id _currentRequest;	// 152 = 0x98
    NSArray *_userSubstitutions;	// 160 = 0xa0
    NSArray *_transientSubstitutions;	// 168 = 0xa8
    SCRCTargetSelectorTimer *_stopSpeakingAfterLongPauseTimer;	// 176 = 0xb0
    unsigned long long _lastSetOptions;	// 184 = 0xb8
    AXSSPunctuationGroup *_fileSystemPunctuationGroup;	// 192 = 0xc0
    NSMutableDictionary *_cachedUtterances;	// 200 = 0xc8
    unsigned int _playingSoundID;	// 208 = 0xd0
    NSString *_lastSelectedLanguage;	// 216 = 0xd8
    NSMutableDictionary *_punctuationFallbacks;	// 224 = 0xe0
    TTSSpeechSynthesizer *_synthesizer;	// 232 = 0xe8
    id <BSInvalidatable> _disableIdleTimerAssertion;	// 240 = 0xf0
    NSNumber *_activityBasedAudioDucking;	// 248 = 0xf8
    TTSSpeechSynthesizer *_synthesizerForTelephonyMixin;	// 256 = 0x100
}

+ (void)_setOverrideLocale:(id)arg1;	// IMP=0x00000001000324e4
- (void).cxx_destruct;	// IMP=0x000000010004072c
@property(retain, nonatomic) TTSSpeechSynthesizer *synthesizerForTelephonyMixin; // @synthesize synthesizerForTelephonyMixin=_synthesizerForTelephonyMixin;
@property(retain, nonatomic) NSNumber *activityBasedAudioDucking; // @synthesize activityBasedAudioDucking=_activityBasedAudioDucking;
@property(retain, nonatomic) id <BSInvalidatable> disableIdleTimerAssertion; // @synthesize disableIdleTimerAssertion=_disableIdleTimerAssertion;
@property(readonly, nonatomic) _Bool isPaused; // @synthesize isPaused=_isPaused;
@property(readonly, nonatomic) _Bool isSpeaking; // @synthesize isSpeaking=_isSpeaking;
@property(readonly, nonatomic) TTSSpeechSynthesizer *synthesizer; // @synthesize synthesizer=_synthesizer;
- (void)setShouldOutputToHearingAid:(_Bool)arg1;	// IMP=0x0000000100040674
- (_Bool)replacesCharacterAsPunctuation:(unsigned short)arg1;	// IMP=0x0000000100040610
- (void)_didFinishSpeaking:(id)arg1;	// IMP=0x00000001000403ac
- (void)speechSynthesizer:(id)arg1 didFinishSpeakingRequest:(id)arg2 successfully:(_Bool)arg3 withError:(id)arg4;	// IMP=0x0000000100040350
- (void)_didSynthesizeSilentlyToURL:(id)arg1 forRequest:(id)arg2;	// IMP=0x0000000100040164
- (void)speechSynthesizer:(id)arg1 didSynthesizeSilentlyToURL:(id)arg2 forRequest:(id)arg3;	// IMP=0x00000001000400f0
- (void)speechSynthesizer:(id)arg1 willSpeakRangeOfSpeechString:(struct _NSRange)arg2 forRequest:(id)arg3;	// IMP=0x000000010003fe98
- (void)speechSynthesizer:(id)arg1 didStartSpeakingRequest:(id)arg2;	// IMP=0x000000010003fe48
- (void)_didStartSpeakingAction:(id)arg1;	// IMP=0x000000010003fcc4
- (void)_uncapVolume:(float)arg1;	// IMP=0x000000010003fc7c
- (void)_capVolumeForLanguage:(id)arg1 volume:(float)arg2;	// IMP=0x000000010003fbf4
- (unsigned int)_cachedSystemSoundIDForString:(id)arg1;	// IMP=0x000000010003fb9c
- (void)_handlePerformAction:(id)arg1;	// IMP=0x000000010003e810
- (void)_updateDuckingBasedOnActivity:(id)arg1;	// IMP=0x000000010003e6c4
- (double)outputMutedActivityLastToggleTime;	// IMP=0x000000010003e6ac
- (id)outputMutedActivityValue:(id)arg1;	// IMP=0x000000010003e69c
- (id)_nextUrlForCachedSpeechSynthesis;	// IMP=0x000000010003e550
- (void)_updatePitch:(id)arg1;	// IMP=0x000000010003e418
- (void)_updateActionWithCanonicalMappings:(id)arg1;	// IMP=0x000000010003e390
- (id)_preferenceLanguageForLanguage:(id)arg1 selectedLanguage:(id)arg2;	// IMP=0x000000010003e258
- (void)_notifyDidFinishSpeakingWithFakeRequestForEvent:(id)arg1;	// IMP=0x000000010003e1ac
- (id)stringReplacingBrailleDotRanges:(id)arg1;	// IMP=0x000000010003de48
- (_Bool)stringIsInSupportedCharacters:(id)arg1;	// IMP=0x000000010003ddb4
- (_Bool)_processActionForLiteralEmojis:(id)arg1;	// IMP=0x000000010003dbb4
- (void)preprocessAction:(id)arg1;	// IMP=0x000000010003d638
- (void)_determineEmojiPreferenceForAction:(id)arg1;	// IMP=0x000000010003d544
- (void)_preprocessActionLanguageAndVoice:(id)arg1;	// IMP=0x000000010003cf74
- (void)_configureSynthesizerWithPhonemeSubstitutionsFromAction:(id)arg1;	// IMP=0x000000010003ca34
- (void)_handleAlternatePronunciation:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x000000010003c634
- (void)_speakAsMixOfLiteralAndNormalText:(id)arg1 withLiteralRanges:(id)arg2;	// IMP=0x000000010003c1c0
- (void)_speakAsNormalText:(id)arg1;	// IMP=0x000000010003c0e0
- (id)_stringForNormalText:(id)arg1 action:(id)arg2 allowPausingAtBoundaries:(_Bool)arg3 ignoreLeadingCommas:(_Bool)arg4;	// IMP=0x000000010003b3c4
- (float)_determineSpeakingRate:(id)arg1 languageCode:(id)arg2;	// IMP=0x000000010003b208
- (float)_determineVolume:(id)arg1;	// IMP=0x000000010003b15c
- (void)_replaceUserSubstitutions:(id)arg1 action:(id)arg2;	// IMP=0x000000010003ae10
- (_Bool)_makeSubstitution:(id)arg1 withString:(id)arg2 punctuationGroup:(id)arg3;	// IMP=0x000000010003aa98
- (void)_processEmoji:(id)arg1 action:(id)arg2;	// IMP=0x000000010003a84c
- (void)_replaceEmoticonsWithText:(id)arg1;	// IMP=0x000000010003a55c
- (void)_removeRunsOfNewLines:(id)arg1;	// IMP=0x000000010003a3a4
- (void)_replacePunctuation:(id)arg1 withAction:(id)arg2 languageCode:(id)arg3;	// IMP=0x0000000100039fac
- (id)_urlRangesInString:(id)arg1 languageCode:(id)arg2;	// IMP=0x0000000100039bec
- (id)_determinePunctuationGroupForAction:(id)arg1 isDefault:(_Bool *)arg2;	// IMP=0x00000001000399b8
- (id)_determineVoiceIdentifier:(id)arg1 languageCode:(id)arg2;	// IMP=0x0000000100039840
- (id)replacePunctuation:(id)arg1 punctuationGroup:(id)arg2 replaceCommas:(_Bool)arg3 languageCode:(id)arg4;	// IMP=0x0000000100039798
- (_Bool)_characterSearchesForSingularForms:(unsigned short)arg1;	// IMP=0x000000010003978c
- (id)_parseNumberInString:(id)arg1 beforeCharacterAtIndex:(long long)arg2 numberRange:(struct _NSRange *)arg3;	// IMP=0x00000001000394e0
- (_Bool)_replaceRepeatedPuntuationAndEmoji:(id)arg1 newString:(id)arg2 charReplacementString:(id)arg3 charSequence:(id)arg4 charIndex:(long long *)arg5 speakPunctuationCounts:(_Bool)arg6 languageCode:(id)arg7;	// IMP=0x000000010003907c
- (void)_replaceRepeatedEmoji:(id)arg1;	// IMP=0x0000000100038a98
- (id)_replacePunctuation:(id)arg1 punctuationGroup:(id)arg2 hasMathContext:(_Bool)arg3 hasPhoneContext:(_Bool)arg4 isText:(_Bool)arg5 replaceCommas:(_Bool)arg6 languageCode:(id)arg7 speakPunctuationCounts:(_Bool)arg8;	// IMP=0x0000000100037550
- (id)baseTableForPunctuationGroup:(id)arg1;	// IMP=0x0000000100037424
- (id)punctuationReplacement:(id)arg1 withGroup:(id)arg2 baseTable:(id)arg3 languageCode:(id)arg4 selectedLanguage:(id)arg5 spokenLanguage:(id)arg6;	// IMP=0x0000000100036f50
- (id)fileSystemPunctuationGroup;	// IMP=0x0000000100036d9c
- (void)_applyTextualWorkarounds:(id)arg1;	// IMP=0x0000000100036d98
- (void)_speakAsPhoneticText:(id)arg1;	// IMP=0x0000000100036d38
- (void)_speakAsLiteralText:(id)arg1;	// IMP=0x0000000100036c34
- (id)_stringForLiteralText:(id)arg1 action:(id)arg2 allowChangingLanguageForPunctuation:(_Bool)arg3;	// IMP=0x0000000100036784
- (id)_literalStringMarkupForString:(id)arg1 languageCode:(id)arg2 action:(id)arg3;	// IMP=0x0000000100036668
- (void)_appendLiteralCharacterString:(id)arg1 toString:(id)arg2 hasPhoneContext:(_Bool)arg3 hasMathContext:(_Bool)arg4 action:(id)arg5 punctuationTableLanguageUsed:(_Bool *)arg6;	// IMP=0x0000000100035b5c
- (void)_formatTimeDuration:(id)arg1 didMatch:(_Bool *)arg2 voiceIdentifier:(id)arg3;	// IMP=0x00000001000351f8
- (void)_formatExplicitTimeDuration:(id)arg1 isMMSS:(_Bool)arg2 languageCode:(id)arg3;	// IMP=0x0000000100034dbc
- (void)_formatIPAddress:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0000000100034820
- (void)_formatATVStyleMediaDurations:(id)arg1;	// IMP=0x00000001000344f8
- (void)_formatUSHeight:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0000000100033fc0
- (void)_formatEthernetMacAddress:(id)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0000000100033c20
- (void)_applyTransliteration:(id)arg1 languageCode:(id)arg2;	// IMP=0x0000000100033ad4
- (void)_formatJapaneseYen:(id)arg1;	// IMP=0x0000000100033898
- (void)_formatDetectedDates:(id)arg1 voiceIdentifier:(id)arg2 languageCode:(id)arg3;	// IMP=0x000000010003323c
- (_Bool)_formatDetectedFinnishDates:(id)arg1;	// IMP=0x0000000100032dec
- (void)_formatTelephoneNumber:(id)arg1 languageCode:(id)arg2 voiceIdentifier:(id)arg3;	// IMP=0x0000000100032c50
- (void)_applyTelephoneFormatting:(id)arg1 withRanges:(id)arg2 languageCode:(id)arg3 voiceIdentifier:(id)arg4;	// IMP=0x00000001000325d0
- (_Bool)_currentLocaleUsesSpaceAsSeparator;	// IMP=0x00000001000324f4
- (void)_insertLongerPausesForSymbol:(id)arg1 withText:(id)arg2 allowPausingAtBoundaries:(_Bool)arg3 onlyApplyWhenFollowedBySpace:(_Bool)arg4 languageCode:(id)arg5 voiceIdentifier:(id)arg6;	// IMP=0x000000010003172c
- (id)pauseStringForType:(int)arg1 voiceIdentifier:(id)arg2;	// IMP=0x0000000100031510
- (long long)_ttsVoiceTypeForPauseCalculationWithVoiceIdentifier:(id)arg1;	// IMP=0x0000000100031404
- (float)_pauseDelayForType:(int)arg1 speechRate:(float)arg2 voiceType:(long long)arg3;	// IMP=0x00000001000313dc
- (id)expectedVoiceIdentifier:(id)arg1;	// IMP=0x0000000100030bf4
- (_Bool)_shouldForceSiriVoice;	// IMP=0x0000000100030bf0
- (_Bool)_stringMatchesSpecialCases:(id)arg1 forSymbol:(id)arg2 ranges:(id *)arg3 langaugeCode:(id)arg4;	// IMP=0x000000010003078c
- (id)_localeSpecificURLRegexForLanguageCode:(id)arg1;	// IMP=0x000000010003056c
- (id)_localeSpecificURLsForLanguageCode:(id)arg1;	// IMP=0x0000000100030534
- (id)_secureTextDescription:(id)arg1;	// IMP=0x0000000100030494
- (void)_replaceEmbeddedTTSCommands:(id)arg1;	// IMP=0x00000001000303f0
- (void)_speakAllDigits:(id)arg1;	// IMP=0x0000000100030284
- (void)handleEvent:(id)arg1;	// IMP=0x00000001000301c0
- (void)dealloc;	// IMP=0x0000000100030134
- (void)_handleStopSpeaking:(id)arg1;	// IMP=0x000000010002fe40
- (void)_handleContinueSpeaking:(id)arg1;	// IMP=0x000000010002fd68
- (void)_handlePauseSpeaking:(id)arg1;	// IMP=0x000000010002fc14
- (void)_stopSpeakingAfterLongPause:(id)arg1;	// IMP=0x000000010002fb4c
- (void)stopSpeakingAtBoundary:(int)arg1;	// IMP=0x000000010002fb3c
- (void)stopSpeakingAtBoundary:(int)arg1 allRequests:(_Bool)arg2;	// IMP=0x000000010002f9a4
- (void)continueSpeaking;	// IMP=0x000000010002f8ec
- (void)pauseSpeakingAtBoundary:(int)arg1;	// IMP=0x000000010002f7e8
- (void)setVoice:(id)arg1;	// IMP=0x000000010002f7b8
- (void)_setVoice:(id)arg1;	// IMP=0x000000010002f6a4
- (void)setRate:(float)arg1;	// IMP=0x000000010002f624
- (float)rate;	// IMP=0x000000010002f60c
- (void)_setRate:(id)arg1;	// IMP=0x000000010002f4c4
- (float)volume;	// IMP=0x000000010002f4b4
- (void)setVolume:(float)arg1;	// IMP=0x000000010002f434
- (void)_setVolume:(id)arg1;	// IMP=0x000000010002f3cc
- (void)_loadPunctuationTable:(id)arg1 withLevel:(long long)arg2 language:(id)arg3;	// IMP=0x000000010002f344
- (void)_saveSpeechStats;	// IMP=0x000000010002f2c4
- (id)currentAllPunctuationTable;	// IMP=0x000000010002f260
- (id)currentNonePunctuationTable;	// IMP=0x000000010002f1fc
- (id)currentSomePunctuationTable;	// IMP=0x000000010002f198
- (void)_resetLanguageDataOnSpeechThread:(id)arg1 language:(id)arg2;	// IMP=0x000000010002eea8
- (void)_selectedLanguageChanged:(id)arg1;	// IMP=0x000000010002ea84
- (void)_initializePunctuationData;	// IMP=0x000000010002e908
- (id)init;	// IMP=0x000000010002e5e4
- (void)_loadNoneTableOverrides;	// IMP=0x000000010002e540
- (void)_loadSpecialPunctuation;	// IMP=0x000000010002e3f0
- (void)_updateChannelLayout;	// IMP=0x000000010002dcc4
- (void)_updateAudioSessionProperties;	// IMP=0x000000010002ce2c
- (void)updateAudioSessionProperties:(id)arg1;	// IMP=0x000000010002ce00
- (void)audioSessionWasInterrupted:(id)arg1;	// IMP=0x000000010002cdd4
- (void)_audioSessionWasInterrupted:(id)arg1;	// IMP=0x000000010002cc30
- (void)updateAccurateWordCallbacks;	// IMP=0x000000010002cc14
- (_Bool)_usingAllChannels;	// IMP=0x000000010002c8d0
- (void)_callStatusChanged;	// IMP=0x000000010002c774
- (void)callStatusChanged;	// IMP=0x000000010002c748
- (void)_initializeSynthesizer;	// IMP=0x000000010002c0f0
- (void)_createTelephonySynthesizer;	// IMP=0x000000010002bfb4
- (void)_tearDownTelephonySynthesizer;	// IMP=0x000000010002bef8
- (void)_updateUserSubstitutions:(id)arg1;	// IMP=0x000000010002bdf0
- (id)_internalVoiceOverSubstitutions;	// IMP=0x000000010002bcc8
- (void)_initializeThread;	// IMP=0x000000010002bc4c
- (double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 waitTime:(double)arg3 cancelMask:(unsigned int)arg4 count:(unsigned int)arg5 objects:(id)arg6;	// IMP=0x000000010002bc24
- (double)performSelector:(SEL)arg1 withThreadKey:(id)arg2 count:(unsigned int)arg3 objects:(id)arg4;	// IMP=0x000000010002bc08

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

