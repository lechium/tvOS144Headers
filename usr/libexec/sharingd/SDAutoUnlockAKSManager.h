//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "SDAutoUnlockTransportClient-Protocol.h"

@class NSData, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_source;

__attribute__((visibility("hidden")))
@interface SDAutoUnlockAKSManager : NSObject <SDAutoUnlockTransportClient>
{
    _Bool _wristDetectDisabled;	// 8 = 0x8
    _Bool _autoUnlockDisabledDueToManagement;	// 9 = 0x9
    _Bool _waitingForUnlock;	// 10 = 0xa
    _Bool _t208Machine;	// 11 = 0xb
    NSString *_localDeviceID;	// 16 = 0x10
    NSString *_state;	// 24 = 0x18
    NSData *_localLTK;	// 32 = 0x20
    NSString *_altDSID;	// 40 = 0x28
    NSObject<OS_dispatch_source> *_keybagAssertionTimer;	// 48 = 0x30
    NSObject<OS_dispatch_source> *_waitingForUnlockTimer;	// 56 = 0x38
    NSMutableDictionary *_remoteLTKs;	// 64 = 0x40
    NSMutableDictionary *_cachedSessions;	// 72 = 0x48
    NSMutableDictionary *_cachedSessionKeys;	// 80 = 0x50
    NSMutableDictionary *_watchIDsToPairingRecords;	// 88 = 0x58
    NSMutableDictionary *_preferredRemoteLTKForDeviceID;	// 96 = 0x60
    NSMutableArray *_watchIDsMissingSessionKey;	// 104 = 0x68
    NSString *_remoteLTKStorageFilePath;	// 112 = 0x70
    NSString *_watchIDsToPairingRecordsStorageFilePath;	// 120 = 0x78
    id _keybagAssertion;	// 128 = 0x80
    NSString *_companionIDStorageFilePath;	// 136 = 0x88
    NSString *_watchIDToCompanionIDStorageFilePath;	// 144 = 0x90
}

+ (id)sharedManager;	// IMP=0x00000001000e3904
- (void).cxx_destruct;	// IMP=0x00000001000f087c
@property(copy, nonatomic) NSString *watchIDToCompanionIDStorageFilePath; // @synthesize watchIDToCompanionIDStorageFilePath=_watchIDToCompanionIDStorageFilePath;
@property(copy, nonatomic) NSString *companionIDStorageFilePath; // @synthesize companionIDStorageFilePath=_companionIDStorageFilePath;
@property(retain) id keybagAssertion; // @synthesize keybagAssertion=_keybagAssertion;
@property(copy, nonatomic) NSString *watchIDsToPairingRecordsStorageFilePath; // @synthesize watchIDsToPairingRecordsStorageFilePath=_watchIDsToPairingRecordsStorageFilePath;
@property(copy, nonatomic) NSString *remoteLTKStorageFilePath; // @synthesize remoteLTKStorageFilePath=_remoteLTKStorageFilePath;
@property(retain, nonatomic) NSMutableArray *watchIDsMissingSessionKey; // @synthesize watchIDsMissingSessionKey=_watchIDsMissingSessionKey;
@property(retain, nonatomic) NSMutableDictionary *preferredRemoteLTKForDeviceID; // @synthesize preferredRemoteLTKForDeviceID=_preferredRemoteLTKForDeviceID;
@property(retain, nonatomic) NSMutableDictionary *watchIDsToPairingRecords; // @synthesize watchIDsToPairingRecords=_watchIDsToPairingRecords;
@property(retain, nonatomic) NSMutableDictionary *cachedSessionKeys; // @synthesize cachedSessionKeys=_cachedSessionKeys;
@property(retain, nonatomic) NSMutableDictionary *cachedSessions; // @synthesize cachedSessions=_cachedSessions;
@property(retain, nonatomic) NSMutableDictionary *remoteLTKs; // @synthesize remoteLTKs=_remoteLTKs;
@property(retain) NSObject<OS_dispatch_source> *waitingForUnlockTimer; // @synthesize waitingForUnlockTimer=_waitingForUnlockTimer;
@property(retain) NSObject<OS_dispatch_source> *keybagAssertionTimer; // @synthesize keybagAssertionTimer=_keybagAssertionTimer;
@property(copy, nonatomic) NSString *altDSID; // @synthesize altDSID=_altDSID;
@property(copy, nonatomic) NSData *localLTK; // @synthesize localLTK=_localLTK;
@property(nonatomic) _Bool t208Machine; // @synthesize t208Machine=_t208Machine;
@property(nonatomic) _Bool waitingForUnlock; // @synthesize waitingForUnlock=_waitingForUnlock;
@property(nonatomic) _Bool autoUnlockDisabledDueToManagement; // @synthesize autoUnlockDisabledDueToManagement=_autoUnlockDisabledDueToManagement;
@property(nonatomic) _Bool wristDetectDisabled; // @synthesize wristDetectDisabled=_wristDetectDisabled;
@property(copy, nonatomic) NSString *state; // @synthesize state=_state;
@property(copy, nonatomic) NSString *localDeviceID; // @synthesize localDeviceID=_localDeviceID;
- (void)updateDynamicStoreEnabled;	// IMP=0x00000001000f071c
- (id)baseDictionary;	// IMP=0x00000001000f06a8
- (id)baseLocalKeysDictionary;	// IMP=0x00000001000f0654
- (id)baseLocalKeysDictionaryForDevice:(id)arg1 type:(id)arg2;	// IMP=0x00000001000f05a4
- (id)baseModernSyncedDictionary;	// IMP=0x00000001000f052c
- (id)modernSyncedDictionaryForDevice:(id)arg1;	// IMP=0x00000001000f0470
- (id)baseSyncedDictionary;	// IMP=0x00000001000f03f4
- (id)syncedDictionaryForDevice:(id)arg1;	// IMP=0x00000001000f0338
- (id)baseRangingDictionary;	// IMP=0x00000001000f02c0
- (id)baseRangingDictionaryForDevice:(id)arg1;	// IMP=0x00000001000f0248
- (id)keychainDataForQuery:(id)arg1;	// IMP=0x00000001000f0108
- (void)deleteAllRangingKeys;	// IMP=0x00000001000eff48
- (void)deleteRangingKeyForDeviceID:(id)arg1;	// IMP=0x00000001000efdb4
- (_Bool)storeRangingKey:(id)arg1 forDeviceID:(id)arg2;	// IMP=0x00000001000efb54
- (id)rangingKeyForDeviceID:(id)arg1;	// IMP=0x00000001000efaf4
- (id)sessionKeyForDeviceID:(id)arg1;	// IMP=0x00000001000ef9a4
- (_Bool)sessionKeyExistsForDeviceID:(id)arg1;	// IMP=0x00000001000ef968
- (id)deriveKeyFromSharedSecret:(id)arg1;	// IMP=0x00000001000ef868
- (void)updateSessionKeys;	// IMP=0x00000001000ef59c
- (void)updateRangingKeysIfNeccesary;	// IMP=0x00000001000ef27c
- (id)ltkInfoForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000ef1b4
- (id)ltkInfoForDeviceID:(id)arg1;	// IMP=0x00000001000ef1a4
- (id)longTermKeyIDForDeviceID:(id)arg1;	// IMP=0x00000001000ef0ec
- (id)longTermKeyForDevice:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000ef098
- (id)anyLongTermKeyForDeviceID:(id)arg1;	// IMP=0x00000001000eeffc
- (void)deleteRemoteLongTermKeyForDeviceID:(id)arg1 modern:(_Bool)arg2 tombstone:(_Bool)arg3;	// IMP=0x00000001000eef04
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3 modern:(_Bool)arg4;	// IMP=0x00000001000eec44
- (_Bool)storeLongTermKey:(id)arg1 forDeviceID:(id)arg2 name:(id)arg3;	// IMP=0x00000001000eeb84
- (void)deleteAllEscrowSecrets;	// IMP=0x00000001000eeaa8
- (void)deleteEscrowSecretForDeviceID:(id)arg1;	// IMP=0x00000001000ee970
- (id)escrowSecretCreationDateForDeviceID:(id)arg1;	// IMP=0x00000001000ee820
- (_Bool)escrowSecretExistsForDevice:(id)arg1;	// IMP=0x00000001000ee750
- (_Bool)storeEscrowSecret:(id)arg1 pairingID:(id)arg2 deviceID:(id)arg3;	// IMP=0x00000001000ee5cc
- (id)keyPairingIDForDeviceID:(id)arg1;	// IMP=0x00000001000ee508
- (id)escrowSecretForDevice:(id)arg1;	// IMP=0x00000001000ee17c
- (_Bool)storeKeychainItemWithAttributeDictionary:(id)arg1 updateDictionary:(id)arg2 addDictionary:(id)arg3;	// IMP=0x00000001000ee000
- (id)autoUnlockFolderPath;	// IMP=0x00000001000edef8
- (id)loadCompanionIDs;	// IMP=0x00000001000edb24
- (void)deleteLegacyCompanionIDs;	// IMP=0x00000001000eda04
- (id)migrateLegacyCompanionIDs:(id)arg1;	// IMP=0x00000001000ed8d0
- (id)loadLegacyWatchIDToCompanionIDMapping;	// IMP=0x00000001000ed624
- (void)deleteLegacyWatchToCompanionIDs;	// IMP=0x00000001000ed504
- (void)migrateLegacyWatchIDToCompanionIDs;	// IMP=0x00000001000ed3a4
- (void)loadWatchIDsToPairingRecords;	// IMP=0x00000001000ed328
- (void)saveWatchIDsToPairingRecords;	// IMP=0x00000001000ed184
- (void)removePairingRecordForWatchID:(id)arg1;	// IMP=0x00000001000ed108
- (void)removePairingIDForWatchID:(id)arg1;	// IMP=0x00000001000ecfa8
- (id)pairingIDForWatchID:(id)arg1;	// IMP=0x00000001000ecefc
- (void)setPairingID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00000001000ecd78
- (void)removeCompanionIDForWatchID:(id)arg1;	// IMP=0x00000001000ecc18
- (id)companionIDForWatchID:(id)arg1;	// IMP=0x00000001000ecb6c
- (void)setCompanionID:(id)arg1 forWatchID:(id)arg2;	// IMP=0x00000001000ec9e8
- (id)allPairedWatchDeviceIDs;	// IMP=0x00000001000ec994
- (void)reloadPairingRecordsIfNeeded;	// IMP=0x00000001000ec8f4
- (void)loadRemoteLTKs;	// IMP=0x00000001000ec3e0
- (void)loadRemoteLTKsIfNeeded;	// IMP=0x00000001000ec38c
- (void)saveRemoteLTKs;	// IMP=0x00000001000ec1e8
- (void)clearRemoteLTKs;	// IMP=0x00000001000ec10c
- (void)removeRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000ebffc
- (void)addRemoteLTK:(id)arg1 ltkHash:(id)arg2 ltkModDate:(id)arg3 modernLTK:(id)arg4 modernLTKHash:(id)arg5 modernLTKModeDate:(id)arg6 deviceID:(id)arg7;	// IMP=0x00000001000ebd24
- (_Bool)disablePairingWithKeyDevice:(id)arg1;	// IMP=0x00000001000ebc40
- (_Bool)ltkExistsForKeyDevice:(id)arg1 updateLTKs:(_Bool)arg2;	// IMP=0x00000001000ebac4
- (_Bool)ltkExistsForKeyDevice:(id)arg1;	// IMP=0x00000001000ebab4
- (void)removeAllRemoteLTKsOnSignOut;	// IMP=0x00000001000eb834
- (void)disablePairingForAllKeyDevices;	// IMP=0x00000001000eb5b8
- (void)deleteEscrowSecretForAllDevices;	// IMP=0x00000001000eb2f0
- (void)handleRequiredStateDisabled;	// IMP=0x00000001000eb2ec
- (_Bool)deviceEnabledAsKey:(id)arg1;	// IMP=0x00000001000eb14c
- (_Bool)deviceEnabledAsKeyForAnyDevice;	// IMP=0x00000001000eaf38
- (_Bool)deviceEnabledAsKeyForAnyIDSDevice;	// IMP=0x00000001000ead24
- (_Bool)localDeviceEnabledAsKey;	// IMP=0x00000001000eaca8
- (void)transport:(id)arg1 didReceivePayload:(id)arg2 type:(unsigned short)arg3 deviceID:(id)arg4;	// IMP=0x00000001000eabe8
- (void)handleLTKResponse:(id)arg1;	// IMP=0x00000001000eabe4
- (void)invalidateWaitingForUnlockTimer;	// IMP=0x00000001000eab0c
- (void)restartWaitingForUnlockTimer;	// IMP=0x00000001000ea90c
- (void)restartKeybagAssertionTimer;	// IMP=0x00000001000ea710
- (void)releaseKeybagAssertion;	// IMP=0x00000001000ea694
- (void)takeMobileKeybagAssertion;	// IMP=0x00000001000ea57c
- (_Bool)pendingReceiveForPeer:(id)arg1;	// IMP=0x00000001000ea574
- (_Bool)pendingSendForPeer:(id)arg1;	// IMP=0x00000001000ea56c
- (_Bool)keychainNeedsSyncingForRequest:(id)arg1;	// IMP=0x00000001000ea14c
- (id)ltksForRequest:(id)arg1;	// IMP=0x00000001000e9ba8
- (void)handleLTKRequest:(id)arg1;	// IMP=0x00000001000e9ba4
- (void)sendLTKResponseWithPayload:(id)arg1 viewState:(id)arg2 needsUnlock:(id)arg3 currentlySyncing:(id)arg4;	// IMP=0x00000001000e9ba0
- (void)fetchLTKsFromCompanionForDeviceID:(id)arg1 needsLTK:(_Bool)arg2 remoteNeedsLTK:(_Bool)arg3 checkViewState:(_Bool)arg4;	// IMP=0x00000001000e9b9c
- (void)fetchLTKsFromCompanion:(_Bool)arg1;	// IMP=0x00000001000e9b80
- (void)updatePreferredRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000e97f4
- (id)remoteLTKList;	// IMP=0x00000001000e96b4
- (id)remoteLTKEntryForDeviceID:(id)arg1;	// IMP=0x00000001000e9634
- (id)remoteLTKHashForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000e95c4
- (_Bool)hashMatchesAnyRemoteLTKForDeviceID:(id)arg1 ltkHash:(id)arg2 isPreferred:(_Bool *)arg3;	// IMP=0x00000001000e927c
- (id)remoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000e91a0
- (id)allRemoteLTKData;	// IMP=0x00000001000e9068
- (id)signedDevices;	// IMP=0x00000001000e8f04
- (id)modernSignedDevices;	// IMP=0x00000001000e8da0
- (id)modificationDataForDeviceID:(id)arg1 modern:(_Bool)arg2;	// IMP=0x00000001000e8bf0
- (id)keychainDevices:(_Bool)arg1;	// IMP=0x00000001000e899c
- (id)allKeychainDevices;	// IMP=0x00000001000e898c
- (_Bool)signLTK:(id)arg1 ltkModDate:(id)arg2 modernLTK:(id)arg3 modernLTKModDate:(id)arg4 deviceID:(id)arg5;	// IMP=0x00000001000e861c
- (_Bool)signLTK:(id)arg1 modernLTK:(id)arg2 forDeviceID:(id)arg3;	// IMP=0x00000001000e859c
- (_Bool)signLTKsForDeviceID:(id)arg1;	// IMP=0x00000001000e84e8
- (void)resignRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000e84dc
- (void)checkRemoteLTKForDeviceID:(id)arg1;	// IMP=0x00000001000e82d8
- (void)checkRemoteLTKs;	// IMP=0x00000001000e82d4
- (void)updateRemoteLTKs;	// IMP=0x00000001000e82c0
- (void)updateLTKsForDeviceID:(id)arg1 staleRemoteLTK:(_Bool)arg2;	// IMP=0x00000001000e7c1c
- (int)ltkSyncStatusForDeviceID:(id)arg1 hash:(id)arg2 modern:(_Bool)arg3;	// IMP=0x00000001000e7a5c
- (_Bool)deviceIsLocalDevice:(id)arg1;	// IMP=0x00000001000e79e0
- (long long)keyClassForDeviceID:(id)arg1;	// IMP=0x00000001000e7900
- (long long)ltkKeyClass;	// IMP=0x00000001000e78f8
- (void)updateLocalLTKForSignout;	// IMP=0x00000001000e7790
- (id)ltkHashForLocalLTK;	// IMP=0x00000001000e770c
- (void)checkLocalLTK;	// IMP=0x00000001000e6f74
- (void)generateLocalLTK;	// IMP=0x00000001000e6b78
- (_Bool)loadLocalLTK;	// IMP=0x00000001000e6610
- (id)deviceIDsMissingSessionKey;	// IMP=0x00000001000e64f0
- (void)clearAllDeviceIDsMissingSessionKeys;	// IMP=0x00000001000e63c0
- (void)removeDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00000001000e6268
- (void)addDeviceIDMissingSessionKey:(id)arg1;	// IMP=0x00000001000e60e0
- (id)decryptMessage:(id)arg1 authTag:(id)arg2 nonce:(id)arg3 bluetoothID:(id)arg4 cachedDevices:(_Bool)arg5 errorCode:(long long *)arg6;	// IMP=0x00000001000e57c0
- (_Bool)encryptMessageData:(id)arg1 deviceID:(id)arg2 encryptedMessage:(id *)arg3 authTag:(id *)arg4 nonce:(id *)arg5;	// IMP=0x00000001000e54c8
- (_Bool)canCreateTokenSessionForDeviceID:(id)arg1;	// IMP=0x00000001000e5470
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 externalACMContext:(id)arg3;	// IMP=0x00000001000e51f8
- (id)aksAuthorizationSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00000001000e51e8
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 usingEscrow:(_Bool)arg3;	// IMP=0x00000001000e4f00
- (id)aksAuthSessionForDeviceID:(id)arg1 originator:(_Bool)arg2;	// IMP=0x00000001000e4ef0
- (id)aksPairingSessionForDeviceID:(id)arg1 originator:(_Bool)arg2 errorCode:(long long *)arg3;	// IMP=0x00000001000e4d8c
- (void)consoleUserChanged:(id)arg1;	// IMP=0x00000001000e4c64
- (void)handleKeyBagLockStateChanged;	// IMP=0x00000001000e4c60
- (void)screenLockUnlocked:(id)arg1;	// IMP=0x00000001000e4bb0
- (void)appleAccountSignedOut:(id)arg1;	// IMP=0x00000001000e4afc
- (void)appleAccountSignedIn:(id)arg1;	// IMP=0x00000001000e4a90
- (void)deviceFirstUnlocked:(id)arg1;	// IMP=0x00000001000e4a84
- (void)handleManagementChanged:(id)arg1;	// IMP=0x00000001000e4808
- (void)addObservers;	// IMP=0x00000001000e46cc
- (void)loadLocalUniqueIDIfNeeded;	// IMP=0x00000001000e45b4
@property(readonly, nonatomic) _Bool viewSyncing;
- (void)updateLocalLTK;	// IMP=0x00000001000e3dec
- (void)updateLTKs;	// IMP=0x00000001000e3d48
- (void)start;	// IMP=0x00000001000e3b54
- (id)init;	// IMP=0x00000001000e3970

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

