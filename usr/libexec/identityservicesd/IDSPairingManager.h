//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Sep 26 2020 13:48:20).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "IDSUTunDeliveryControllerConnectivityDelegate-Protocol.h"

@class IDSCountdown, IDSPairedDeviceRepository, NRDeviceManager, NSData, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSSet, NSString;

@interface IDSPairingManager : NSObject <IDSUTunDeliveryControllerConnectivityDelegate>
{
    NSHashTable *_delegateMap;	// 8 = 0x8
    _Bool _hasLoadedPairedDevices;	// 16 = 0x10
    int _pairingStateToken;	// 20 = 0x14
    CDUnknownBlockType _block;	// 24 = 0x18
    _Bool _isPendingResetOfKeyRegenerationFlag;	// 32 = 0x20
    IDSCountdown *_pairedDeviceInfoRequestCountdown;	// 40 = 0x28
    NSMutableDictionary *_cbuuidToBTOutOfBandKeyDictionary;	// 48 = 0x30
    _Bool _shouldQuickSwitchAfterIPSecConnected;	// 56 = 0x38
    NRDeviceManager *_nrDeviceManager;	// 64 = 0x40
    IDSPairedDeviceRepository *_pairedDeviceRepository;	// 72 = 0x48
    NSMutableArray *_registeredPairedDeviceDidConnectBlockPairs;	// 80 = 0x50
}

+ (void)devicePairingProtocolVersion:(unsigned int *)arg1 minCompatibilityVersion:(unsigned int *)arg2 maxCompatibilityVersion:(unsigned int *)arg3;	// IMP=0x00000001002426c0
+ (_Bool)_isTinkerPairedInCapabilityFlags:(unsigned long long)arg1;	// IMP=0x000000010023649c
+ (_Bool)_isIPsecSupportedByCapabilityFlags:(unsigned long long)arg1;	// IMP=0x000000010023646c
+ (_Bool)_isEncryptionKeyRegenerationSupportedByCapabilityFlags:(unsigned long long)arg1;	// IMP=0x0000000100236440
+ (id)sharedInstance;	// IMP=0x0000000100233bf0
- (void).cxx_destruct;	// IMP=0x000000010024341c
@property(nonatomic) _Bool shouldQuickSwitchAfterIPSecConnected; // @synthesize shouldQuickSwitchAfterIPSecConnected=_shouldQuickSwitchAfterIPSecConnected;
@property(readonly, nonatomic) NSMutableArray *registeredPairedDeviceDidConnectBlockPairs; // @synthesize registeredPairedDeviceDidConnectBlockPairs=_registeredPairedDeviceDidConnectBlockPairs;
@property(readonly, nonatomic) IDSPairedDeviceRepository *pairedDeviceRepository; // @synthesize pairedDeviceRepository=_pairedDeviceRepository;
@property(readonly, nonatomic) NRDeviceManager *nrDeviceManager; // @synthesize nrDeviceManager=_nrDeviceManager;
- (id)_nrDeviceIdentifierWithCBUUID:(id)arg1;	// IMP=0x0000000100243148
- (void)deliveryController:(id)arg1 foundNearbyIPsecCapableDeviceWithUniqueID:(id)arg2;	// IMP=0x000000010024297c
- (void)refreshPairedDeviceEncryptionKeys;	// IMP=0x0000000100242304
- (_Bool)updatePairedDeviceiCloudURIs:(id)arg1 pushToken:(id)arg2;	// IMP=0x0000000100241dcc
- (_Bool)updatePairedDeviceBuildVersion:(id)arg1 productVersion:(id)arg2 productName:(id)arg3 pairingProtocolVersion:(unsigned int)arg4 minCompatibilityVersion:(unsigned int)arg5 maxCompatibilityVersion:(unsigned int)arg6 serviceMinCompatibilityVersion:(unsigned short)arg7 capabilityFlags:(unsigned long long)arg8 deviceUniqueID:(id)arg9;	// IMP=0x000000010024030c
- (_Bool)_isIPSecLinkEnabled;	// IMP=0x00000001002402e0
- (void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 properties:(id)arg2 shouldPairDirectlyOverIPsec:(_Bool)arg3;	// IMP=0x000000010023fbc4
- (void)_networkRelayRegisterDeviceWithCBUUID:(id)arg1 wasInitiallySetupUsingIDSPairing:(_Bool)arg2 maxCompatibilityVersion:(id)arg3 BTOutOfBandKey:(id)arg4 supportsIPsecWithSPPLink:(_Bool)arg5 bluetoothMACAddress:(id)arg6;	// IMP=0x000000010023fa40
- (id)_createRegistrationProperties:(_Bool)arg1 maxCompatibilityVersion:(id)arg2 BTOutOfBandKey:(id)arg3 supportsIPsecWithSPPLink:(_Bool)arg4 bluetoothMACAddress:(id)arg5;	// IMP=0x000000010023f864
- (_Bool)isMissingAnyPublicKeyForPairedDeviceWithCBUUID:(id)arg1;	// IMP=0x000000010023f760
- (_Bool)setPairedDeviceInfo:(id)arg1;	// IMP=0x000000010023ed5c
- (_Bool)updateLocalPairedDevice:(id)arg1 pairingType:(long long)arg2;	// IMP=0x000000010023eb0c
- (_Bool)updatePairedDeviceWithCBUUID:(id)arg1 supportIPsec:(_Bool)arg2;	// IMP=0x000000010023ea04
- (void)_clearPairedDeviceDidConnectBlocksForUniqueID:(id)arg1;	// IMP=0x000000010023e6b4
- (void)_callPairedDeviceDidConnectBlocksForUniqueID:(id)arg1 withError:(id)arg2;	// IMP=0x000000010023e360
- (void)registerPairedDeviceWithUniqueID:(id)arg1 didConnectBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000010023e17c
- (_Bool)shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:(_Bool)arg1;	// IMP=0x000000010023dfa8
- (_Bool)shouldUseIPsecLinkForDefaultPairedDevice;	// IMP=0x000000010023df58
- (id)_cbuuidsWithIsPairingValue:(_Bool)arg1;	// IMP=0x000000010023dc68
- (id)pairedDeviceRecords;	// IMP=0x000000010023d714
- (id)localDeviceRecord;	// IMP=0x000000010023d5b8
- (id)_identityDataErrorPairForDataProtectionClass:(unsigned int)arg1;	// IMP=0x000000010023d430
- (id)cbuuidsOfPairedDevices;	// IMP=0x000000010023d3f4
- (id)cbuuidsOfPairingDevices;	// IMP=0x000000010023d3b8
- (_Bool)isTraditionalDevicePairedOrPairing;	// IMP=0x000000010023d308
- (_Bool)isCurrentDevicePairedOrPairing;	// IMP=0x000000010023d260
- (void)ensureCommunicationWithActivePairedDeviceIsPossible;	// IMP=0x000000010023cec4
- (void)updateNetworkRelayStateForAllPairedDevices;	// IMP=0x000000010023c6f8
- (void)deactivatePairedDevices;	// IMP=0x000000010023c1e8
- (long long)activatePairedDeviceWithCBUUID:(id)arg1;	// IMP=0x000000010023b8e4
- (void)disconnectActivePairedDevice;	// IMP=0x000000010023b7b0
- (_Bool)removeLocalPairedDevice:(id)arg1;	// IMP=0x000000010023b27c
- (_Bool)addLocalPairedDevice:(id)arg1 BTOutOfBandKey:(id)arg2 shouldPairDirectlyOverIPsec:(_Bool)arg3 pairingType:(long long)arg4 bluetoothMACAddress:(id)arg5;	// IMP=0x000000010023a648
- (void)removeDelegate:(id)arg1;	// IMP=0x000000010023a5b8
- (void)addDelegate:(id)arg1;	// IMP=0x000000010023a4f4
- (void)_updateActiveStateForAllPairedDevices:(_Bool)arg1;	// IMP=0x0000000100239f34
- (void)_updateActiveStateForAllPairedDevices;	// IMP=0x0000000100239ef8
- (void)_updatePairedState:(_Bool)arg1;	// IMP=0x0000000100239d7c
- (_Bool)_hasAllEncryptionKeys;	// IMP=0x0000000100239b8c
- (id)pairedDeviceForUniqueID:(id)arg1;	// IMP=0x00000001002398c8
@property(readonly, nonatomic) NSSet *allTraditionallyPairedUniqueIDs;
@property(readonly, nonatomic) NSSet *allPairedUniqueIDs;
- (_Bool)_isPairedToDevice:(id)arg1;	// IMP=0x000000010023921c
@property(readonly, nonatomic) _Bool isPaired;
@property(readonly, nonatomic) NSDictionary *pairedDevicePrivateData;
- (long long)pairedDevicePairingType;	// IMP=0x000000010023905c
- (id)pairedDeviceiCloudURIs;	// IMP=0x0000000100238fcc
@property(readonly, nonatomic) NSData *pairedDevicePushToken;
@property(readonly, nonatomic) NSData *pairedDevicePublicClassCKey;
@property(readonly, nonatomic) NSData *pairedDevicePublicClassAKey;
@property(readonly, nonatomic) NSData *pairedDevicePublicKey;
@property(readonly, nonatomic) NSDictionary *pairedDevice;
- (id)pairedDeviceHandlesWithPairingType:(long long)arg1;	// IMP=0x0000000100238a14
- (id)allPairedDevicesWithType:(long long)arg1;	// IMP=0x00000001002389a0
@property(readonly, nonatomic) NSSet *allPairedDevices;
@property(readonly, nonatomic) _Bool isCurrentDeviceTinkerConfiguredWatch;
- (_Bool)activePairedDeviceHasPairingType:(long long)arg1;	// IMP=0x0000000100238878
@property(readonly, nonatomic) unsigned short pairedDeviceServiceMinCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDeviceMaxCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDeviceMinCompatibilityVersion;
@property(readonly, nonatomic) unsigned int pairedDevicePairingProtocolVersion;
- (id)pairedDeviceProductName;	// IMP=0x00000001002385c4
- (id)pairedDeviceProductVersion;	// IMP=0x0000000100238534
- (id)pairedDeviceBuildVersion;	// IMP=0x00000001002384a4
@property(readonly, nonatomic) NSString *pairedDeviceUniqueID;
@property(readonly, nonatomic) NSString *pairedDeviceUUIDString;
- (id)_activePairedDeviceCBUUID;	// IMP=0x0000000100238350
- (void)gatherLocalDeviceInfoWithCompletionBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001002378ec
- (id)_localDevicePrivateData;	// IMP=0x0000000100237150
@property(readonly, nonatomic) NSDictionary *localDevice;
- (_Bool)_purgeSecuredEncryptionKeysForAllPairedDevices;	// IMP=0x0000000100236b78
- (void)_suspendOTRSessionsWithProtectionClass:(unsigned int)arg1;	// IMP=0x00000001002366b8
- (void)_regenerateSecuredEncryptionKeys;	// IMP=0x00000001002364cc
- (_Bool)_markSecuredEncryptionKeysAsRegenerated:(_Bool)arg1;	// IMP=0x0000000100236054
- (unsigned long long)_hasRegeneratedSecuredEncryptionKeys;	// IMP=0x0000000100235b8c
- (long long)_migrateSecuredEncryptionKeys;	// IMP=0x0000000100235640
- (void)_loadPairedDevicePropertiesIfNeeded;	// IMP=0x0000000100235440
- (void)systemDidLeaveFirstDataProtectionLock;	// IMP=0x000000010023540c
- (id)init;	// IMP=0x00000001002352f4
- (id)initWithNRDeviceManager:(id)arg1 pairedDeviceRepository:(id)arg2;	// IMP=0x0000000100234f40
@property(readonly, copy) NSString *description;
- (void)dealloc;	// IMP=0x0000000100234dec
- (void)_requestPairedDeviceInfo;	// IMP=0x0000000100234878
- (void)_requestPairedDeviceInfoAfterDelay:(double)arg1;	// IMP=0x0000000100234660
- (void)_notifyDelegatesDeviceUnpairedFromDevice:(id)arg1;	// IMP=0x0000000100234340
- (void)_notifyDelegatesDevicePairedToDevice:(id)arg1;	// IMP=0x0000000100234020
- (void)_notifyDelegatesWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000100233d9c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

